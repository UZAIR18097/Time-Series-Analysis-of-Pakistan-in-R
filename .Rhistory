#Input : String of file
#Output: dataframe
read_data <- function(data){
data <- read.csv(data)
#make first column as date
data[,1] <-as.Date(data[,1],format ="%m-%d-%y")
#make imports as numeric
#data$Imports <- as.numeric(data$Imports)
#make M2 as numeric
data$M2 <- as.numeric(data$M2)
return(data)
}
df<-read_data("Data.csv")
str(df)
rm(list = ls())
#below function reads the data from csv file
#Input : String of file
#Output: dataframe
read_data <- function(data){
data <- read.csv(data)
#make first column as date
data[,1] <-as.Date(data[,1],format ="%m-%d-%y")
#make imports as numeric
data$Imports <- (as.numeric(as.character(data$Imports)))
#make M2 as numeric
data$M2 <- as.numeric(data$M2)
return(data)
}
df<-read_data("Data.csv")
View(df)
imports <- ts(df$Imports)
imports
rm(list = ls())
#below function reads the data from csv file
#Input : String of file
#Output: dataframe
read_data <- function(data){
data <- read.csv(data)
#make first column as date
data[,1] <-as.Date(data[,1],format ="%m-%d-%y")
#make imports as numeric
#data$Imports <- (as.numeric(as.character(data$Imports)))
#make M2 as numeric
data$M2 <- as.numeric(data$M2)
return(data)
}
df<-read_data("Data.csv")
imports <- ts(df$Imports)
imports
class(imports)
exports<- yearmon(df$Exports)
eexports
exports
colnames(df)
cpi <- ts(df$CPI,frequency=12, start=c(1991,1))
cpi <- ts(df$IPILSM,frequency=12, start=c(1991,1))
cpi <- ts(df$TBR,frequency=12, start=c(1991,1))
cpi <- ts(df$M2,frequency=12, start=c(1991,1))
cpi <- ts(df$Exports,frequency=12, start=c(1991,1))
cpi <- ts(df$Imports,frequency=12, start=c(1991,1))
exports
set.seed(123)
#clear global environment
rm(list = ls())
#below function reads the data from csv file
#Input : String of file
#Output: dataframe
read_data <- function(data){
data <- read.csv(data)
#make first column as date
data[,1] <-as.Date(data[,1],format ="%m-%d-%y")
#make imports as numeric
#data$Imports <- (as.numeric(as.character(data$Imports)))
#make M2 as numeric
data$M2 <- as.numeric(data$M2)
return(data)
}
df<-read_data("Data.csv")
cpi <- ts(df$CPI,frequency=12, start=c(1991,1))
ipilsm <- ts(df$IPILSM,frequency=12, start=c(1991,1))
tbr <- ts(df$TBR,frequency=12, start=c(1991,1))
m2 <- ts(df$M2,frequency=12, start=c(1991,1))
exports <- ts(df$Exports,frequency=12, start=c(1991,1))
imports <- ts(df$Imports,frequency=12, start=c(1991,1))
cpi
cpi <- ts(df$CPI,frequency= 4, start=c(1991,1))
cpi <- ts(df$CPI,frequency= 4, start=c(1991,1))
cpi
cpi <- ts(df$CPI,frequency=12, start=c(1991,1))
ipilsm <- ts(df$IPILSM,frequency=12, start=c(1991,1))
tbr <- ts(df$TBR,frequency=12, start=c(1991,1))
m2 <- ts(df$M2,frequency=12, start=c(1991,1))
exports <- ts(df$Exports,frequency=12, start=c(1991,1))
imports <- ts(df$Imports,frequency=12, start=c(1991,1))
cpi
cpi_quarter <- aggregate(cpi,nfrequency = 4)
ipilsm_quarter <- aggregate(ipilsm,nfrequency = 4)
tbr_quarter <- aggregate(tbr,nfrequency = 4)
m2_quarter <- aggregate(m2,nfrequency = 4)
exports_quarter <- aggregate(exports,nfrequency = 4)
imports_quarter <- aggregate(imports,nfrequency = 4)
cpi_quarter
y <- arima.sim(model=list(order=c(3,1,0), ar=c(0.5, 0.3, 0.1)),
n.start=3, innov=c(0,rnorm(99)), n=100)
y <- y[-1]
acf(y)
mydata = data.frame(y)
maxlag <- 10
t = seq(1:length(mydata$y))
mm <- model.matrix(~t-1, data=mydata)
y <- as.ts(mydata$y)
fit <- auto.arima(y, xreg=mm, d=1,max.p=maxlag, max.order=maxlag, max.q=0,
seasonal=FALSE, trace=TRUE, stepwise =FALSE)
print(fit)
x <- ts(y[1:90])
fit <- arima(x, order=c(3,1,0), seasonal=list(order=c(0,0,0),period=12))
pred <- predict(fit,n.ahead=10)
# graph them.
par(mfrow=c(1,1))
plot(c(x,pred$pred), ylim=c(-3,50), type="n")
lines(1:90,x, lty=1)
lines(91:100, pred$pred + 2*pred$se, lty=2)
lines(91:100, pred$pred - 2*pred$se, lty=2)
points(91:100, pred$pred, pch=4)
points(91:100, y[91:100], pch=1) #This is the data that was "held out"
title("95% Forecast intervals")
par(mfrow=c(1,1))
plot(c(x,pred$pred), ylim=c(-3,50), type="n")
par(mfrow=c(1,1))
plot(c(x,pred$pred), ylim=c(-3,50), type="n")
lines(1:90,x, lty=1)
lines(91:100, pred$pred + 2*pred$se, lty=2)
lines(91:100, pred$pred - 2*pred$se, lty=2)
points(91:100, pred$pred, pch=4)
points(91:100, y[91:100], pch=1) #This is the data that was "held out"
title("95% Forecast intervals")
?delt
?Delt
inflation <- ts(Delt(df$CPI),frequency=12, start=c(1991,1))
inflation <- ts(PercChange(df$CPI),frequency=12, start=c(1991,1))
df$inflation <- PercChange(df$CPI)
?PercChane
?PercChange
?PercChange
?PercChange
??PercChange
install.packages("datacombine")
install.packages("DataCombine")
PercChange
PercChange(df,cpi)
library(DataCombine)
library(DataCombine)
PercChange(data = df,Var = "CPI",NewVar = "Inflation",type = "percent")
df <- PercChange(data = df,Var = "CPI",NewVar = "Inflation",type = "percent")
nflation <- ts(df$Inflation,frequency=12, start=c(1991,1))
inflation <- ts(df$Inflation,frequency=12, start=c(1991,1))
inflation
?aggregate
cpi_quarter <- aggregate(cpi,nfrequency = 4)
cpi_quarter
install.packages("TSstudio")
library(TSstudio)
split_inflation <- ts_split(ts.obj = inflation, sample.out = 12)
View(split_inflation)
split_inflation[["test"]]
#split data for train and test and set the last 12 months as a testing partition
split_inflation <- ts_split(ts.obj = inflation, sample.out = 12)
split_ipilsm <- ts_split(ts.obj = ipilsm, sample.out = 12)
split_tbr <- ts_split(ts.obj = tbr, sample.out = 12)
split_m2 <- ts_split(ts.obj = m2, sample.out = 12)
split_exports <- ts_split(ts.obj = exports, sample.out = 12)
split_imports <- ts_split(ts.obj = imports, sample.out = 12)
split_imports[["test"]]
inflation_fit <- auto.arima(split_inflation,allowdrift = TRUE,allowmean = TRUE,lambda = "auto")
class(split_inflation)
split_inflation
train.perc = 0.8
train.indx = 1:as.integer(dim(inflation)[1] * train.perc)
train.data <- final.data[train.indx,]
test.data  <- final.data[-train.indx ,]
train.perc = 0.8
train.indx = 1:as.integer(dim(inflation) * train.perc)
train.data <- final.data[train.indx,]
test.data  <- final.data[-train.indx ,]
inflation_fit <- auto.arima(split_inflation,allowdrift = TRUE,allowmean = TRUE,lambda = "auto")
ts(split_inflation)
ts(split_inflation)
View(split_inflation)
split_inflation[["train"]]
inflation_fit <- auto.arima(split_inflation[["train"]],allowdrift = TRUE,allowmean = TRUE,lambda = "auto")
inflation_fit <- auto.arima(split_inflation[["train"]],allowdrift = TRUE,allowmean = TRUE)
warnings()
inflation_fit <- auto.arima(split_inflation[["train"]])
print(inflation_fit)
inflation_fit <- auto.arima(split_inflation[["train"]],xreg=mm, d=1,max.p=maxlag, max.order=maxlag, max.q=0,
seasonal=FALSE, trace=TRUE, stepwise =FALSE)
inflation_fit <- auto.arima(split_inflation,xreg=mm, d=1,max.p=maxlag, max.order=maxlag, max.q=0,
seasonal=FALSE, trace=TRUE, stepwise =FALSE)
seasonal=FALSE, trace=TRUE, stepwise =FALSE)
inflation_fit <- auto.arima(split_inflation[["train"]],xreg=mm, d=1,max.p=maxlag, max.order=maxlag, max.q=0,
seasonal=FALSE, trace=TRUE, stepwise =FALSE)
inflation_fit <- auto.arima(split_inflation[["train"]])
#clear global environment
rm(list = ls())
seasonal=FALSE, trace=TRUE, stepwise =FALSE)
cat("\014")
set.seed(123)
#clear global environment
rm(list = ls())
#below function reads the data from csv file
#Input : String of file
#Output: dataframe
read_data <- function(data){
data <- read.csv(data)
#make first column as date
data[,1] <-as.Date(data[,1],format ="%m-%d-%y")
data$M2 <- as.numeric(data$M2)
return(data)
}
df<-read_data("Data.csv")
#convert cpi to inflation and make new dataframe storing in df
df <- PercChange(data = df,Var = "CPI",NewVar = "Inflation",type = "percent")
#convert all columns to monthly time series
inflation <- ts(df$Inflation,frequency=12, start=c(1991,1))
ipilsm <- ts(df$IPILSM,frequency=12, start=c(1991,1))
tbr <- ts(df$TBR,frequency=12, start=c(1991,1))
m2 <- ts(df$M2,frequency=12, start=c(1991,1))
exports <- ts(df$Exports,frequency=12, start=c(1991,1))
imports <- ts(df$Imports,frequency=12, start=c(1991,1))
#split data for train and test and set the last 12 months as a testing partition
split_inflation <- ts_split(ts.obj = inflation, sample.out = 12)
split_ipilsm <- ts_split(ts.obj = ipilsm, sample.out = 12)
split_tbr <- ts_split(ts.obj = tbr, sample.out = 12)
split_m2 <- ts_split(ts.obj = m2, sample.out = 12)
split_exports <- ts_split(ts.obj = exports, sample.out = 12)
split_imports <- ts_split(ts.obj = imports, sample.out = 12)
inflation_fit <- auto.arima(split_inflation[["train"]])
print(inflation_fit)
ipilsm_fit <- auto.arima(split_ipilsm[["train"]])
tbr_fit <- auto.arima(split_tbr[["train"]])
m2_fit <- auto.arima(split_m2[["train"]])
exports_fit <- auto.arima(split_exports[["train"]])
imports_fit <- auto.arima(split_imports[["train"]])
imports_fit <- auto.arima(split_imports[["train"]])
warnings()
split_imports[["train"]]
split_exports[["train"]]
set.seed(123)
#clear global environment
rm(list = ls())
#below function reads the data from csv file
#Input : String of file
#Output: dataframe
read_data <- function(data){
data <- read.csv(data)
#make first column as date
data[,1] <-as.Date(data[,1],format ="%m-%d-%y")
data$M2 <- as.numeric(data$M2)
return(data)
}
rm(list = ls())
read_data <- function(data){
data <- read.csv(data)
#make first column as date
data[,1] <-as.Date(data[,1],format ="%m-%d-%y")
data$M2 <- as.numeric(data$M2)
return(data)
}
df<-read_data("Data.csv")
#convert cpi to inflation and make new dataframe storing in df
df <- PercChange(data = df,Var = "CPI",NewVar = "Inflation",type = "percent")
#convert all columns to monthly time series
inflation <- ts(df$Inflation,frequency=12, start=c(1991,1))
ipilsm <- ts(df$IPILSM,frequency=12, start=c(1991,1))
tbr <- ts(df$TBR,frequency=12, start=c(1991,1))
m2 <- ts(df$M2,frequency=12, start=c(1991,1))
exports <- ts(df$Exports,frequency=12, start=c(1991,1))
imports <- ts(df$Imports,frequency=12, start=c(1991,1))
#split data for train and test and set the last 12 months as a testing partition
split_inflation <- ts_split(ts.obj = inflation, sample.out = 12)
split_ipilsm <- ts_split(ts.obj = ipilsm, sample.out = 12)
split_tbr <- ts_split(ts.obj = tbr, sample.out = 12)
split_m2 <- ts_split(ts.obj = m2, sample.out = 12)
split_exports <- ts_split(ts.obj = exports, sample.out = 12)
split_imports <- ts_split(ts.obj = imports, sample.out = 12)
inflation_fit <- auto.arima(split_inflation[["train"]])
ipilsm_fit <- auto.arima(split_ipilsm[["train"]])
tbr_fit <- auto.arima(split_tbr[["train"]])
m2_fit <- auto.arima(split_m2[["train"]])
exports_fit <- auto.arima(split_exports[["train"]])
imports_fit <- auto.arima(split_imports[["train"]])
View(split_inflation)
split_inflation[["train"]]
View(inflation_fit)
inflation_fit[["model"]]
View(ipilsm_fit)
ipilsm_fit[["model"]]
print(inflation_fit)
inflation_model <- arima(inflation_fit, c(2,0,0)(1,0,2)[12])
inflation_model <- arima(split_inflation[["train"]], c(2,0,0)(1,0,2)[12])
print(ipilsm_fit)
#fit the correct model on training data
inflation_model <- Arima(split_inflation[["train"]], order = c(2,0,0),seasonal = c(1,0,2))
inflation_model<-Arima(inflation_fit)
View(inflation_fit)
inflation_fit[["model"]]
print(ipilsm_fit)
inflation_model <- Arima(split_inflation[["train"]], order = c(2,0,0),seasonal = c(1,0,2),lag(12))
print(inflation_fit)
inflation_model <- Arima(split_inflation[["train"]], order = c(2,0,0),seasonal = c(1,0,2),include.mean = TRUE)
#fit the correct model on training data
inflation_model <- Arima(split_inflation[["train"]], order = c(2,0,0),seasonal = c(1,0,2),include.mean = TRUE,period=12)
#fit the correct model on training data
inflation_model <- arima(split_inflation[["train"]], order = c(2,0,0),seasonal = c(1,0,2),include.mean = TRUE,period=12)
x <- ts(y[1:90])
fit <- arima(x, order=c(3,1,0), seasonal=list(order=c(0,0,0),period=12))
#fit the correct model on training data
inflation_model <- arima(split_inflation[["train"]], order = c(2,0,0),seasonal=list(order=c(1,0,2),period=12),include.mean = TRUE,period=12)
#fit the correct model on training data
inflation_model <- arima(split_inflation[["train"]], order = c(2,0,0),seasonal=list(order=c(1,0,2),period=12),include.mean = TRUE)
ipilsm_fit
inflation_model <- Arima(split_inflation[["train"]], order = c(2,0,0),seasonal=list(order=c(1,0,2),period=12),include.mean = TRUE)
ipilsm_model <- Arima(split_ipilsm[["train"]],order = c(1,0,2),seasonal=list(order=c(0,1,2),period=12),include.drift = TRUE)
tbr_fit
tbr_model <- Arima(split_tbr[["train"]],order = c(0,1,0))
m2_fit
m2_model <- Arima(split_m2[["train"]], order = c(2,1,2),seasonal=list(order=c(0,1,1),period=12))
exports_fit
exports_model <- Arima(split_exports[["train"]], order = c(2,1,0),seasonal=list(order=c(0,0,2),period=12))
imports_fit
imports_model <- Arima(split_imports[["train"]], order = c(0,1,1),seasonal=list(order=c(0,0,1),period=12))
inflation_predictions <- predict(inflation_model,n.ahead=12)
inflation_predictions
split_inflation[["test"]]
inflation_predictions <- predict(inflation_model,n.ahead=12)
ipilsm_predictions <- predict(inflation_model,n.ahead=12)
tbr_predictions <- predict(inflation_model,n.ahead=12)
m2_predictions <- predict(inflation_model,n.ahead=12)
exports_predictions <- predict(inflation_model,n.ahead=12)
imports_predictions <- predict(inflation_model,n.ahead=12)
Rmse_inflation <-RMSE(split_inflation[["test"]], inflation_predictions)
plot_forecast(inflation_predictions)
inflation_train <- Arima(split_inflation[["train"]], order = c(2,0,0),seasonal=list(order=c(1,0,2),period=12),include.mean = TRUE)
ipilsm_train <- Arima(split_ipilsm[["train"]],order = c(1,0,2),seasonal=list(order=c(0,1,2),period=12),include.drift = TRUE)
tbr_train <- Arima(split_tbr[["train"]],order = c(0,1,0))
m2_train <- Arima(split_m2[["train"]], order = c(2,1,2),seasonal=list(order=c(0,1,1),period=12))
exports_train <- Arima(split_exports[["train"]], order = c(2,1,0),seasonal=list(order=c(0,0,2),period=12))
imports_train <- Arima(split_imports[["train"]], order = c(0,1,1),seasonal=list(order=c(0,0,1),period=12))
inflation_predictions <- predict(inflation_train,n.ahead=12)
ipilsm_predictions <- predict(ipilsm_train,n.ahead=12)
tbr_predictions <- predict(tbr_train,n.ahead=12)
m2_predictions <- predict(m2_train,n.ahead=12)
exports_predictions <- predict(exports_train,n.ahead=12)
imports_predictions <- predict(imports_train,n.ahead=12)
inflation_train %>%
forecast(h=12) %>%
autoplot() + autolayer(split_inflation[["test"]])
inflation_train %>%
forecast(h=12) %>%
autoplot() + autolayer(split_inflation[["test"]])
length(inflation)
training <- subset(inflation, end=length(inflation)-12)
test <- subset(auscafe, start=length(inflation)-11)
forecast(h=11) %>%
autoplot() + autolayer(test)
training <- subset(inflation, end=length(inflation)-12)
test <- subset(inflation, start=length(inflation)-11)
forecast(h=11) %>%
autoplot() + autolayer(test)
inflation.train <- Arima(split_inflation[["train"]], order = c(2,0,0),seasonal=list(order=c(1,0,2),period=12),include.mean = TRUE)
inflation.train %>%
forecast(h=60) %>%
autoplot() + autolayer(test)
inflation.train %>%
forecast(h=60)
inflation.train %>%
forecast(h=60) %>%
autoplot()
inflation.train %>%
forecast(h=60) %>%
autolayer(test)
inflation.train %>%
forecast(h=60) %>%
autoplot(training) + autolayer(test)
inflation.train %>%
forecast(h=11) %>%
autoplot(training) + autolayer(test)
training <- subset(inflation, end=length(inflation)-61)
test <- subset(inflation, start=length(inflation)-60)
inflation.train  %>%
forecast(h=60) %>%
autoplot() + autolayer(test)
?autoplot()
training <- subset(inflation, end=length(inflation)-61)
test <- subset(inflation, start=length(inflation)-60)
inflation.train  %>%
forecast(h=60) %>%
autoplot(training) + autolayer(test)
#store the scores
inflation.test <- Arima(split_inflation[["test"]], model=cafe.train)
#store the scores
inflation.test <- Arima(split_inflation[["test"]], model=inflation.train)
accuracy(inflation.test)
#store the scores
inflation.test <- Arima(test, model=inflation.train)
accuracy(inflation.test)
inflation.test <- Arima(inflation_predictions, model=inflation.train)
inflation_predictions
View(inflation_predictions)
inflation_predictions[["pred"]]
inflation.test <- Arima(inflation_predictions[["pred"]], model=inflation.train)
accuracy(inflation.test)
library(dynlm)
library(zoo)
library(forecast)
library(strucchange)
library(tidyverse)
library(lubridate)
library(MLmetrics)
library(xts)
library(DataCombine)
library(TSstudio)
set.seed(123)
#clear global environment
rm(list = ls())
#below function reads the data from csv file
#Input : String of file
#Output: dataframe
cat("\014")
read_data <- function(data){
data <- read.csv(data)
#make first column as date
data[,1] <-as.Date(data[,1],format ="%m-%d-%y")
data$M2 <- as.numeric(data$M2)
return(data)
}
df<-read_data("Data.csv")
#convert cpi to inflation and make new dataframe storing in df
df <- PercChange(data = df,Var = "CPI",NewVar = "Inflation",type = "percent")
df<-read_data("Data.csv")
#convert cpi to inflation and make new dataframe storing in df
df <- PercChange(data = df,Var = "CPI",NewVar = "Inflation",type = "percent")
df<-read_data("Data.csv")
#convert cpi to inflation and make new dataframe storing in df
df <- PercChange(data = df,Var = "CPI",NewVar = "Inflation",type = "percent")
df<-read_data("Data.csv")
#convert cpi to inflation and make new dataframe storing in df
df <- PercChange(data = df,Var = "CPI",NewVar = "Inflation",type = "percent")
df<-read_data("Data.csv")
#convert cpi to inflation and make new dataframe storing in df
df <- PercChange(data = df,Var = "CPI",NewVar = "Inflation",type = "percent")
#convert all columns to monthly time series
inflation <- ts(df$Inflation,frequency=12, start=c(1991,1))
ipilsm <- ts(df$IPILSM,frequency=12, start=c(1991,1))
tbr <- ts(df$TBR,frequency=12, start=c(1991,1))
m2 <- ts(df$M2,frequency=12, start=c(1991,1))
exports <- ts(df$Exports,frequency=12, start=c(1991,1))
imports <- ts(df$Imports,frequency=12, start=c(1991,1))
#split data for train and test and set the last 12 months as a testing partition
split_inflation <- ts_split(ts.obj = inflation, sample.out = 12)
split_ipilsm <- ts_split(ts.obj = ipilsm, sample.out = 12)
split_tbr <- ts_split(ts.obj = tbr, sample.out = 12)
split_m2 <- ts_split(ts.obj = m2, sample.out = 12)
split_exports <- ts_split(ts.obj = exports, sample.out = 12)
split_imports <- ts_split(ts.obj = imports, sample.out = 12)
#fit auto.arima on each series training data
inflation_fit <- auto.arima(split_inflation[["train"]])
ipilsm_fit <- auto.arima(split_ipilsm[["train"]])
tbr_fit <- auto.arima(split_tbr[["train"]])
m2_fit <- auto.arima(split_m2[["train"]])
exports_fit <- auto.arima(split_exports[["train"]])
imports_fit <- auto.arima(split_imports[["train"]])
#fit the correct model on training data
inflation.train <- Arima(split_inflation[["train"]], order = c(2,0,0),seasonal=list(order=c(1,0,2),period=12),include.mean = TRUE)
ipilsm.train <- Arima(split_ipilsm[["train"]],order = c(1,0,2),seasonal=list(order=c(0,1,2),period=12),include.drift = TRUE)
tbr.train <- Arima(split_tbr[["train"]],order = c(0,1,0))
m2.train <- Arima(split_m2[["train"]], order = c(2,1,2),seasonal=list(order=c(0,1,1),period=12))
exports.train <- Arima(split_exports[["train"]], order = c(2,1,0),seasonal=list(order=c(0,0,2),period=12))
imports.train <- Arima(split_imports[["train"]], order = c(0,1,1),seasonal=list(order=c(0,0,1),period=12))
#generate predictions for next 12 months
inflation_predictions <- predict(inflation_train,n.ahead=12)
ipilsm_predictions <- predict(ipilsm_train,n.ahead=12)
tbr_predictions <- predict(tbr_train,n.ahead=12)
m2_predictions <- predict(m2_train,n.ahead=12)
exports_predictions <- predict(exports_train,n.ahead=12)
imports_predictions <- predict(imports_train,n.ahead=12)
#store the scores
inflation.test <- Arima(split_inflation[["test"]], model=inflation.train)
ipilsm.test <- Arima(split_inflation[["test"]], model=ipilsm.train)
tbr.test <- Arima(split_inflation[["test"]], model=tbr.train)
m2.test <- Arima(split_inflation[["test"]], model=m2.train)
exports.test <- Arima(split_inflation[["test"]], model=exports.train)
imports.test <- Arima(split_inflation[["test"]], model=imports.train)
#generate predictions for next 12 months
inflation_predictions <- predict(inflation.train,n.ahead=12)
ipilsm_predictions <- predict(ipilsm.train,n.ahead=12)
tbr_predictions <- predict(tbr.train,n.ahead=12)
m2_predictions <- predict(m2.train,n.ahead=12)
exports_predictions <- predict(exports.train,n.ahead=12)
imports_predictions <- predict(imports.train,n.ahead=12)
#store the scores
inflation.test <- Arima(split_inflation[["test"]], model=inflation.train)
ipilsm.test <- Arima(split_inflation[["test"]], model=ipilsm.train)
tbr.test <- Arima(split_inflation[["test"]], model=tbr.train)
m2.test <- Arima(split_inflation[["test"]], model=m2.train)
exports.test <- Arima(split_inflation[["test"]], model=exports.train)
imports.test <- Arima(split_inflation[["test"]], model=imports.train)
exports.test
View(exports.test)
exports.test[["model"]]
inflation_predictions
split_inflation[["test"]]
